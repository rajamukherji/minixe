-- ROOT --

PLATFORM := defined("PLATFORM") or shell("uname"):trim
DEBUG := defined("DEBUG")
PREFIX := file(defined("PREFIX") or "/usr/local")

CC := if defined("MINGW") then "x86_64-w64-mingw32-gcc" else "gcc" end
PKG_CONFIG := if defined("MINGW") then "x86_64-w64-mingw32-pkg-config" else "pkg-config" end

INSTALL := meta("install")

pkgconfig := fun(Args) do
	expr('pkg-config {Args}') => fun() shell(PKG_CONFIG, Args):trim
end

CFLAGS := []
LDFLAGS := []
PREBUILDS := []

if defined("MINGW") then
	CFLAGS := old + ["-DMINGW"]
end

c_compile := fun(Object) do
	var Source := Object % "c"
	execute(CC, '-c {CFLAGS} -o{Object} {Source}')
end

c_includes := fun(Target) do
	var Files := []
	var Lines := shell(CC, '-c {CFLAGS} -M -MG {Target:source}')
	var Files := Lines:trim:replace(r"\\\n ", "") / r"[^\\]( +)"
	Files:pop
	for File in Files do
		File := file(File:replace(r"\\ ", " "))
	end
	return Files
end

SourceTypes := {
	"c" is [c_includes, c_compile]
}

c_program := fun(Executable, Objects, Libraries) do
	if defined("MINGW") then
		Executable := old % "exe"
	end
	Objects := Objects or []
	Libraries := Libraries or []
	var Sources := []
	for Object in Objects do
		for Extension, Functions in SourceTypes do
			var Source := Object % Extension
			if Source:exists then
				Sources:put(Source)
				var Scan := Source:scan("INCLUDES")[PREBUILDS] => Functions[1]
				Object[Source, Scan] => Functions[2]
				exit
			end
		end
	end
	Executable[Objects, Libraries] => fun(Executable) do
		execute(CC, '-o', Executable, Objects, Libraries, LDFLAGS)
		DEBUG or execute('strip', Executable)
	end
	DEFAULT[Executable]
end

install := fun(Source, Target, Mode) do
	Target[Source] => fun(Target) do
		Target:dir:mkdir
		Source:copy(Target)
		Mode and execute("chmod", Mode, Target)
	end
	INSTALL[Target]
end

BIN_DIR := file("bin"):mkdir
SHARE_DIR := file("share"):mkdir

vmount("obj", "src")
subdir("obj")
